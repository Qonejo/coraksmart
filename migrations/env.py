import logging
from logging.config import fileConfig

from flask import current_app

from alembic import context

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
fileConfig(config.config_file_name)
logger = logging.getLogger('alembic.env')


def get_engine():
    """
    Return the SQLAlchemy Engine used by Flask-Migrate.
    
    Attempts to obtain the Engine via current_app.extensions['migrate'].db.get_engine() (compatible with Flask-SQLAlchemy < 3 and Alchemical). If that call raises TypeError or AttributeError, falls back to current_app.extensions['migrate'].db.engine (compatible with Flask-SQLAlchemy >= 3).
    
    Returns:
        sqlalchemy.engine.Engine: The resolved SQLAlchemy Engine instance.
    """
    try:
        # this works with Flask-SQLAlchemy<3 and Alchemical
        return current_app.extensions['migrate'].db.get_engine()
    except (TypeError, AttributeError):
        # this works with Flask-SQLAlchemy>=3
        return current_app.extensions['migrate'].db.engine


def get_engine_url():
    """
    Return the SQLAlchemy engine URL as a string suitable for Alembic configuration.
    
    Uses the application's engine URL and, when supported, calls `render_as_string(hide_password=False)` so the returned URL includes any password. Percent signs are escaped (each '%' replaced with '%%') so the string can be safely placed into Alembic config files. Falls back to `str(engine.url)` on SQLAlchemy versions that lack `render_as_string`.
    """
    try:
        return get_engine().url.render_as_string(hide_password=False).replace(
            '%', '%%')
    except AttributeError:
        return str(get_engine().url).replace('%', '%%')


# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
config.set_main_option('sqlalchemy.url', get_engine_url())
target_db = current_app.extensions['migrate'].db

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def get_metadata():
    """
    Return the SQLAlchemy MetaData object used for autogeneration.
    
    If the configured migration DB exposes multiple metadatas (e.g., `metadatas` mapping),
    this returns the default metadata stored under the `None` key. Otherwise it returns
    the single `metadata` attribute. Returned object is suitable as Alembic's `target_metadata`.
    """
    if hasattr(target_db, 'metadatas'):
        return target_db.metadatas[None]
    return target_db.metadata


def run_migrations_offline():
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url, target_metadata=get_metadata(), literal_binds=True
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """
    Run migrations in "online" mode: create a DB connection, configure Alembic, and execute migrations.
    
    This function:
    - Ensures a `process_revision_directives` callback is installed in
      current_app.extensions['migrate'].configure_args to skip autogenerated
      revisions when there are no schema changes (logs a notice in that case).
    - Obtains the SQLAlchemy Engine via get_engine(), opens a connection, and
      calls alembic.context.configure(...) with that connection and the module's
      target metadata (from get_metadata()) plus any configured arguments.
    - Runs migrations inside a transaction (context.begin_transaction / context.run_migrations).
    
    No value is returned.
    """

    # this callback is used to prevent an auto-migration from being generated
    # when there are no changes to the schema
    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html
    def process_revision_directives(context, revision, directives):
        """
        Skip emitting an empty autogeneration revision.
        
        When Alembic autogeneration is active, examines the first generated directive's
        upgrade operations and, if no schema changes are present, clears the
        `directives` list in-place to prevent creating a no-op migration and logs an
        informational message.
        
        Parameters:
            context: The Alembic migration context provided to callbacks.
            revision: The revision identifier or revision-related object passed by Alembic.
            directives: A mutable list of generated revision directives; this function
                may modify the list in-place to cancel generation.
        """
        if getattr(config.cmd_opts, 'autogenerate', False):
            script = directives[0]
            if script.upgrade_ops.is_empty():
                directives[:] = []
                logger.info('No changes in schema detected.')

    conf_args = current_app.extensions['migrate'].configure_args
    if conf_args.get("process_revision_directives") is None:
        conf_args["process_revision_directives"] = process_revision_directives

    connectable = get_engine()

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=get_metadata(),
            **conf_args
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
